You are given two arrays nums1 and nums2 consisting of positive integers.

You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.

Return the minimum equal sum you can obtain, or -1 if it is impossible.

 

Example 1:

Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]
Output: 12
Explanation: We can replace 0's in the following way:
- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].
- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].
Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.
Example 2:

Input: nums1 = [2,0,2,0], nums2 = [1,4]
Output: -1
Explanation: It is impossible to make the sum of both arrays equal.


SOLUTIONS:

class Solution {

    public long minSum(int[] nums1, int[] nums2) {
        long sum1 = 0, sum2 = 0;
        long zero1 = 0, zero2 = 0;
//sum1 and sum2 ye do variables he nums1 and nums2 arrays ke sum ko store krega
//zero1 and zero2 ae contans he track kregi nums1 and nums2 arrys me 0 elements he
        for (int i : nums1) {
            sum1 += i;
            if (i == 0) {
                sum1++;
                zero1++;
            }
        }

//for (int i : nums1) : ishme nums1 array ke har elements me iterate krega
//sum1 += i; sum1 me nums1 ke sbhi elements ka sum add krega
//  if (i == 0) : elements 0 he
//sum1++ : sum1 me 1 add krna he or 0 treat krta he cases me 0 ko sum me add nhi krna he specail case he
//zero!++: hme zero1 ko increments krna he nums1 me 0 elements he
      

        for (int i : nums2) {
            sum2 += i;
            if (i == 0) {
                sum2++;
                zero2++;
            }
        }

        if ((zero1 == 0 && sum2 > sum1) || (zero2 == 0 && sum1 > sum2)) {
            return -1;
        }
//if ((zero1 == 0 && sum2 > sum1) || (zero2 == 0 && sum1 > sum2))  nums2 and nums1 se jayaga he return krega -1 allocation vaild nhi he
//nums2 me koi 0 nhi he nums1 sum nums2 se jaya d ahe fir hme return -1 kr skte he
      
        return Math.max(sum1, sum2);
    }
}

// return Math.max(sum1, sum2); return kregi maximum values
