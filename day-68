You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 

Example 1:


Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]
Example 2:


Input: root = [4,2,7,1,3], val = 5
Output: []


SOLTUIONS:

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

public class Solution {

    public TreeNode searchBST(TreeNode root, int val) {
        // Base case: root is null or value found
        if (root == null || root.val == val) {
            return root;
        }

        // If val is less than root's value, go left
        if (val < root.val) {
            return searchBST(root.left, val);
        }

        // If val is greater, go right
        return searchBST(root.right, val);
    }
}
