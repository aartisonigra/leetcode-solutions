Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = "2"
Output: ["a","b","c"]

SOLUTIONS:

import java.util.*;

class Solution {
    public List<String> letterCombinations(String digits) {
        // अगर input empty है तो कुछ नहीं करना
        if (digits == null || digits.length() == 0) {
            return new ArrayList<>();
        }

        // Digit से letters का mapping
        String[] map = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };

        List<String> result = new ArrayList<>();
        backtrack(result, map, digits, 0, new StringBuilder());
        return result;
    }

    private void backtrack(List<String> result, String[] map, String digits, int index, StringBuilder current) {
        // Base case: जब सभी digits process हो जाएं
        if (index == digits.length()) {
            result.add(current.toString());
            return;
        }

        // Current digit के letters निकालो
        String letters = map[digits.charAt(index) - '0'];

        // हर letter के लिए recursion call करो
        for (char ch : letters.toCharArray()) {
            current.append(ch);
            backtrack(result, map, digits, index + 1, current);
            current.deleteCharAt(current.length() - 1); // Backtrack
        }
    }
}
