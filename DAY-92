There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

SOLUTIONS:

public class Solution {

    // Function to return number of provinces (connected components)
    public int findCircleNum(int[][] isConnected) {
        if (isConnected == null || isConnected.length == 0) return 0;
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int provinces = 0;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                // new province found
                provinces++;
                dfs(isConnected, visited, i);
            }
        }
        return provinces;
    }

    // DFS using adjacency matrix
    private void dfs(int[][] g, boolean[] visited, int node) {
        visited[node] = true;
        int n = g.length;
        for (int j = 0; j < n; j++) {
            // if there's an edge and j not visited, go deeper
            if (g[node][j] == 1 && !visited[j]) {
                dfs(g, visited, j);
            }
        }
    }

    // for local testing
    public static void main(String[] args) {
        Solution sol = new Solution();

        int[][] isConnected1 = {
            {1,1,0},
            {1,1,0},
            {0,0,1}
        };
        System.out.println(sol.findCircleNum(isConnected1)); // expected 2

        int[][] isConnected2 = {
            {1,0,0},
            {0,1,0},
            {0,0,1}
        };
        System.out.println(sol.findCircleNum(isConnected2)); // expected 3
    }
}
